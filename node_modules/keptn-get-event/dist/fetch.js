"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getApiEvent = void 0;
const node_fetch_1 = __importDefault(require("node-fetch"));
function getEvent(url, token, keptnTypeEvent) {
    return (0, node_fetch_1.default)(url, {
        method: 'get',
        headers: {
            'Content-Type': 'application/json',
            accept: 'application/json',
            'x-token': token,
        },
    })
        .then((response) => response.json())
        .then((json) => {
        return json['events'].filter((event) => event['type'] === keptnTypeEvent);
    })
        .catch((error) => {
        throw error;
    });
}
async function getApiEvent(url, token, keptnTypeEvent, awaitTime, countEffort, delayTime) {
    let counterEffort = 0;
    let response;
    let events;
    console.log(`Awaiting before start main function: ${awaitTime} sec`);
    await delay(awaitTime);
    while (counterEffort < countEffort) {
        console.log(`Iteration: ${counterEffort}`);
        events = await getEvent(url, token, keptnTypeEvent);
        if (events.length !== 0) {
            response = events[0];
            console.log('Event found.');
            console.log(response);
            break;
        }
        else {
            console.log(`Event isn't found.`);
            console.log(`Delay to send new request: ${delayTime} sec`);
            await delay(delayTime);
        }
        counterEffort++;
    }
    return await response;
}
exports.getApiEvent = getApiEvent;
function delay(delayTime) {
    return new Promise((f) => setTimeout(f, delayTime * 1000));
}
