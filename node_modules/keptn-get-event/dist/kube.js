"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getKubeEvent = void 0;
const js_yaml_1 = require("js-yaml");
const js_base64_1 = require("js-base64");
const k8s = __importStar(require("@kubernetes/client-node"));
const net = __importStar(require("net"));
const fetch_1 = require("./fetch");
async function getKubeEvent(kubeSettings, keptnContext, keptnTypeEvent, awaitTime, countEffort, delayTime) {
    const kubeConnect = (0, js_yaml_1.load)(kubeSettings);
    const kc = new k8s.KubeConfig();
    kc.loadFromDefault();
    const k8sApi = kc.makeApiClient(k8s.CoreV1Api);
    const forward = new k8s.PortForward(kc);
    // Get Keptn Api token
    const token = await k8sApi
        .readNamespacedSecret(kubeConnect.secret, kubeConnect.namespace)
        .then((res) => {
        const data = res.body.data;
        return (0, js_base64_1.decode)(data[kubeConnect.secret]);
    });
    console.log(`Got token from secret '${kubeConnect.secret}' in namespace '${kubeConnect.namespace}'.`);
    // Get Pod name from service
    const podName = await k8sApi
        .listNamespacedPod(kubeConnect.namespace)
        .then((pods) => {
        return pods.body.items
            .map((pod) => pod.metadata?.name)
            .filter((name) => new RegExp(kubeConnect.service, 'i').test(name))[0];
    });
    console.log(`Pod name for port-forwarding '${podName}'.`);
    // Start port forwarding
    const hostname = 'localhost';
    const port = 8080;
    const server = net.createServer((socket) => {
        forward.portForward(kubeConnect.namespace, podName, [port], socket, null, socket);
    });
    try {
        await server.listen(port, hostname);
        console.log('Up server with port-forwarding.');
    }
    catch (error) {
        throw new Error(`Error with starting net server! ${error}`);
    }
    // Send request
    const keptnUrl = new URL(`http://${hostname}:${port}`);
    keptnUrl.pathname = 'api/mongodb-datastore/event';
    keptnUrl.searchParams.append('keptnContext', keptnContext);
    console.log(`Sending request with URL '${keptnUrl.href}'.`);
    const response = await (0, fetch_1.getApiEvent)(keptnUrl.href, token, keptnTypeEvent, awaitTime, countEffort, delayTime);
    // Stop port forwarding
    try {
        await server.close(function () {
            server.unref();
        });
        console.log('Stop server with port-forwarding.');
    }
    catch (error) {
        throw new Error(`Error with stop net server! ${error}`);
    }
    return response;
}
exports.getKubeEvent = getKubeEvent;
